// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Dashboard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dashboard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dashboard must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dashboard", id.toString(), this);
    }
  }

  static load(id: string): Dashboard | null {
    return changetype<Dashboard | null>(store.get("Dashboard", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taskCount(): BigInt {
    let value = this.get("taskCount");
    return value!.toBigInt();
  }

  set taskCount(value: BigInt) {
    this.set("taskCount", Value.fromBigInt(value));
  }

  get itemCount(): BigInt {
    let value = this.get("itemCount");
    return value!.toBigInt();
  }

  set itemCount(value: BigInt) {
    this.set("itemCount", Value.fromBigInt(value));
  }

  get requireCount(): i32 {
    let value = this.get("requireCount");
    return value!.toI32();
  }

  set requireCount(value: i32) {
    this.set("requireCount", Value.fromI32(value));
  }

  get platformCount(): BigInt {
    let value = this.get("platformCount");
    return value!.toBigInt();
  }

  set platformCount(value: BigInt) {
    this.set("platformCount", Value.fromBigInt(value));
  }

  get boxCount(): BigInt {
    let value = this.get("boxCount");
    return value!.toBigInt();
  }

  set boxCount(value: BigInt) {
    this.set("boxCount", Value.fromBigInt(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    return value!.toBigInt();
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }

  get dayData(): Array<string> | null {
    let value = this.get("dayData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set dayData(value: Array<string> | null) {
    if (!value) {
      this.unset("dayData");
    } else {
      this.set("dayData", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class DayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DayData", id.toString(), this);
    }
  }

  static load(id: string): DayData | null {
    return changetype<DayData | null>(store.get("DayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dashboard(): string {
    let value = this.get("dashboard");
    return value!.toString();
  }

  set dashboard(value: string) {
    this.set("dashboard", Value.fromString(value));
  }

  get day(): i32 {
    let value = this.get("day");
    return value!.toI32();
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get taskCount(): BigInt {
    let value = this.get("taskCount");
    return value!.toBigInt();
  }

  set taskCount(value: BigInt) {
    this.set("taskCount", Value.fromBigInt(value));
  }

  get itemCount(): BigInt {
    let value = this.get("itemCount");
    return value!.toBigInt();
  }

  set itemCount(value: BigInt) {
    this.set("itemCount", Value.fromBigInt(value));
  }

  get platformCount(): BigInt {
    let value = this.get("platformCount");
    return value!.toBigInt();
  }

  set platformCount(value: BigInt) {
    this.set("platformCount", Value.fromBigInt(value));
  }

  get boxCount(): BigInt {
    let value = this.get("boxCount");
    return value!.toBigInt();
  }

  set boxCount(value: BigInt) {
    this.set("boxCount", Value.fromBigInt(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    return value!.toBigInt();
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }
}

export class Task extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Task entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Task must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Task", id.toString(), this);
    }
  }

  static load(id: string): Task | null {
    return changetype<Task | null>(store.get("Task", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get applicant(): string {
    let value = this.get("applicant");
    return value!.toString();
  }

  set applicant(value: string) {
    this.set("applicant", Value.fromString(value));
  }

  get box(): string {
    let value = this.get("box");
    return value!.toString();
  }

  set box(value: string) {
    this.set("box", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get auditModule(): Bytes {
    let value = this.get("auditModule");
    return value!.toBytes();
  }

  set auditModule(value: Bytes) {
    this.set("auditModule", Value.fromBytes(value));
  }

  get detectionModule(): Bytes {
    let value = this.get("detectionModule");
    return value!.toBytes();
  }

  set detectionModule(value: Bytes) {
    this.set("detectionModule", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get requires(): string {
    let value = this.get("requires");
    return value!.toString();
  }

  set requires(value: string) {
    this.set("requires", Value.fromString(value));
  }

  get start(): i32 {
    let value = this.get("start");
    return value!.toI32();
  }

  set start(value: i32) {
    this.set("start", Value.fromI32(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get source(): string {
    let value = this.get("source");
    return value!.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get itemCount(): BigInt {
    let value = this.get("itemCount");
    return value!.toBigInt();
  }

  set itemCount(value: BigInt) {
    this.set("itemCount", Value.fromBigInt(value));
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }

  get adopted(): string | null {
    let value = this.get("adopted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set adopted(value: string | null) {
    if (!value) {
      this.unset("adopted");
    } else {
      this.set("adopted", Value.fromString(<string>value));
    }
  }

  get state(): string | null {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set state(value: string | null) {
    if (!value) {
      this.unset("state");
    } else {
      this.set("state", Value.fromString(<string>value));
    }
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get time(): i32 {
    let value = this.get("time");
    return value!.toI32();
  }

  set time(value: i32) {
    this.set("time", Value.fromI32(value));
  }

  get reputation(): BigInt {
    let value = this.get("reputation");
    return value!.toBigInt();
  }

  set reputation(value: BigInt) {
    this.set("reputation", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    return value!.toBigInt();
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get taskCount(): BigInt {
    let value = this.get("taskCount");
    return value!.toBigInt();
  }

  set taskCount(value: BigInt) {
    this.set("taskCount", Value.fromBigInt(value));
  }

  get makeItemCount(): BigInt {
    let value = this.get("makeItemCount");
    return value!.toBigInt();
  }

  set makeItemCount(value: BigInt) {
    this.set("makeItemCount", Value.fromBigInt(value));
  }

  get ownItemCount(): BigInt {
    let value = this.get("ownItemCount");
    return value!.toBigInt();
  }

  set ownItemCount(value: BigInt) {
    this.set("ownItemCount", Value.fromBigInt(value));
  }

  get auditCount(): BigInt {
    let value = this.get("auditCount");
    return value!.toBigInt();
  }

  set auditCount(value: BigInt) {
    this.set("auditCount", Value.fromBigInt(value));
  }

  get adoptedCount(): BigInt {
    let value = this.get("adoptedCount");
    return value!.toBigInt();
  }

  set adoptedCount(value: BigInt) {
    this.set("adoptedCount", Value.fromBigInt(value));
  }

  get guard(): Bytes | null {
    let value = this.get("guard");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set guard(value: Bytes | null) {
    if (!value) {
      this.unset("guard");
    } else {
      this.set("guard", Value.fromBytes(<Bytes>value));
    }
  }

  get revenues(): Array<string> | null {
    let value = this.get("revenues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set revenues(value: Array<string> | null) {
    if (!value) {
      this.unset("revenues");
    } else {
      this.set("revenues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tasks(): Array<string> | null {
    let value = this.get("tasks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tasks(value: Array<string> | null) {
    if (!value) {
      this.unset("tasks");
    } else {
      this.set("tasks", Value.fromStringArray(<Array<string>>value));
    }
  }

  get itemsMaker(): Array<string> | null {
    let value = this.get("itemsMaker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set itemsMaker(value: Array<string> | null) {
    if (!value) {
      this.unset("itemsMaker");
    } else {
      this.set("itemsMaker", Value.fromStringArray(<Array<string>>value));
    }
  }

  get itemsOwner(): Array<string> | null {
    let value = this.get("itemsOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set itemsOwner(value: Array<string> | null) {
    if (!value) {
      this.unset("itemsOwner");
    } else {
      this.set("itemsOwner", Value.fromStringArray(<Array<string>>value));
    }
  }

  get audits(): Array<string> | null {
    let value = this.get("audits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set audits(value: Array<string> | null) {
    if (!value) {
      this.unset("audits");
    } else {
      this.set("audits", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Revenue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Revenue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Revenue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Revenue", id.toString(), this);
    }
  }

  static load(id: string): Revenue | null {
    return changetype<Revenue | null>(store.get("Revenue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get locked(): BigInt {
    let value = this.get("locked");
    return value!.toBigInt();
  }

  set locked(value: BigInt) {
    this.set("locked", Value.fromBigInt(value));
  }

  get extracted(): BigInt {
    let value = this.get("extracted");
    return value!.toBigInt();
  }

  set extracted(value: BigInt) {
    this.set("extracted", Value.fromBigInt(value));
  }
}

export class Require extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Require entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Require must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Require", id.toString(), this);
    }
  }

  static load(id: string): Require | null {
    return changetype<Require | null>(store.get("Require", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get notes(): string {
    let value = this.get("notes");
    return value!.toString();
  }

  set notes(value: string) {
    this.set("notes", Value.fromString(value));
  }

  get tasks(): Array<string> | null {
    let value = this.get("tasks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tasks(value: Array<string> | null) {
    if (!value) {
      this.unset("tasks");
    } else {
      this.set("tasks", Value.fromStringArray(<Array<string>>value));
    }
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Item entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Item must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Item", id.toString(), this);
    }
  }

  static load(id: string): Item | null {
    return changetype<Item | null>(store.get("Item", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value!.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get time(): i32 {
    let value = this.get("time");
    return value!.toI32();
  }

  set time(value: i32) {
    this.set("time", Value.fromI32(value));
  }

  get task(): string {
    let value = this.get("task");
    return value!.toString();
  }

  set task(value: string) {
    this.set("task", Value.fromString(value));
  }

  get requires(): string {
    let value = this.get("requires");
    return value!.toString();
  }

  set requires(value: string) {
    this.set("requires", Value.fromString(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }

  get fingerprint(): BigInt {
    let value = this.get("fingerprint");
    return value!.toBigInt();
  }

  set fingerprint(value: BigInt) {
    this.set("fingerprint", Value.fromBigInt(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get supporterCount(): BigInt {
    let value = this.get("supporterCount");
    return value!.toBigInt();
  }

  set supporterCount(value: BigInt) {
    this.set("supporterCount", Value.fromBigInt(value));
  }

  get opponentCount(): BigInt {
    let value = this.get("opponentCount");
    return value!.toBigInt();
  }

  set opponentCount(value: BigInt) {
    this.set("opponentCount", Value.fromBigInt(value));
  }

  get versionCount(): i32 {
    let value = this.get("versionCount");
    return value!.toI32();
  }

  set versionCount(value: i32) {
    this.set("versionCount", Value.fromI32(value));
  }

  get audits(): Array<string> | null {
    let value = this.get("audits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set audits(value: Array<string> | null) {
    if (!value) {
      this.unset("audits");
    } else {
      this.set("audits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get versions(): Array<string> | null {
    let value = this.get("versions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set versions(value: Array<string> | null) {
    if (!value) {
      this.unset("versions");
    } else {
      this.set("versions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Version extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Version entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Version must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Version", id.toString(), this);
    }
  }

  static load(id: string): Version | null {
    return changetype<Version | null>(store.get("Version", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    return value!.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }

  get vaild(): boolean {
    let value = this.get("vaild");
    return value!.toBoolean();
  }

  set vaild(value: boolean) {
    this.set("vaild", Value.fromBoolean(value));
  }

  get fingerprint(): BigInt {
    let value = this.get("fingerprint");
    return value!.toBigInt();
  }

  set fingerprint(value: BigInt) {
    this.set("fingerprint", Value.fromBigInt(value));
  }
}

export class Platform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Platform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Platform must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Platform", id.toString(), this);
    }
  }

  static load(id: string): Platform | null {
    return changetype<Platform | null>(store.get("Platform", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get time(): i32 {
    let value = this.get("time");
    return value!.toI32();
  }

  set time(value: i32) {
    this.set("time", Value.fromI32(value));
  }

  get authorityModule(): Bytes | null {
    let value = this.get("authorityModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set authorityModule(value: Bytes | null) {
    if (!value) {
      this.unset("authorityModule");
    } else {
      this.set("authorityModule", Value.fromBytes(<Bytes>value));
    }
  }

  get platformId(): BigInt {
    let value = this.get("platformId");
    return value!.toBigInt();
  }

  set platformId(value: BigInt) {
    this.set("platformId", Value.fromBigInt(value));
  }

  get boxCount(): BigInt {
    let value = this.get("boxCount");
    return value!.toBigInt();
  }

  set boxCount(value: BigInt) {
    this.set("boxCount", Value.fromBigInt(value));
  }

  get rateCountsToProfit(): i32 {
    let value = this.get("rateCountsToProfit");
    return value!.toI32();
  }

  set rateCountsToProfit(value: i32) {
    this.set("rateCountsToProfit", Value.fromI32(value));
  }

  get rateAuditorDivide(): i32 {
    let value = this.get("rateAuditorDivide");
    return value!.toI32();
  }

  set rateAuditorDivide(value: i32) {
    this.set("rateAuditorDivide", Value.fromI32(value));
  }

  get boxs(): Array<string> | null {
    let value = this.get("boxs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set boxs(value: Array<string> | null) {
    if (!value) {
      this.unset("boxs");
    } else {
      this.set("boxs", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Box extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Box entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Box must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Box", id.toString(), this);
    }
  }

  static load(id: string): Box | null {
    return changetype<Box | null>(store.get("Box", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get realId(): BigInt {
    let value = this.get("realId");
    return value!.toBigInt();
  }

  set realId(value: BigInt) {
    this.set("realId", Value.fromBigInt(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get time(): i32 {
    let value = this.get("time");
    return value!.toI32();
  }

  set time(value: i32) {
    this.set("time", Value.fromI32(value));
  }

  get taskCount(): BigInt {
    let value = this.get("taskCount");
    return value!.toBigInt();
  }

  set taskCount(value: BigInt) {
    this.set("taskCount", Value.fromBigInt(value));
  }

  get tasks(): Array<string> | null {
    let value = this.get("tasks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tasks(value: Array<string> | null) {
    if (!value) {
      this.unset("tasks");
    } else {
      this.set("tasks", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Audit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Audit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Audit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Audit", id.toString(), this);
    }
  }

  static load(id: string): Audit | null {
    return changetype<Audit | null>(store.get("Audit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get time(): i32 {
    let value = this.get("time");
    return value!.toI32();
  }

  set time(value: i32) {
    this.set("time", Value.fromI32(value));
  }

  get auditor(): string {
    let value = this.get("auditor");
    return value!.toString();
  }

  set auditor(value: string) {
    this.set("auditor", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    return value!.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get attitude(): string {
    let value = this.get("attitude");
    return value!.toString();
  }

  set attitude(value: string) {
    this.set("attitude", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class WhitelistedToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WhitelistedToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WhitelistedToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WhitelistedToken", id.toString(), this);
    }
  }

  static load(id: string): WhitelistedToken | null {
    return changetype<WhitelistedToken | null>(
      store.get("WhitelistedToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimal(): i32 {
    let value = this.get("decimal");
    return value!.toI32();
  }

  set decimal(value: i32) {
    this.set("decimal", Value.fromI32(value));
  }
}
