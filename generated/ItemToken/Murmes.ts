// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Murmes__getAdoptedItemDataResult {
  value0: BigInt;
  value1: Address;
  value2: Array<Address>;

  constructor(value0: BigInt, value1: Address, value2: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddressArray(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): Array<Address> {
    return this.value2;
  }
}

export class Murmes__getItemResultValue0Struct extends ethereum.Tuple {
  get state(): i32 {
    return this[0].toI32();
  }

  get taskId(): BigInt {
    return this[1].toBigInt();
  }

  get supporters(): Array<Address> {
    return this[2].toAddressArray();
  }

  get opponents(): Array<Address> {
    return this[3].toAddressArray();
  }

  get stateChangeTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class Murmes__getItemAuditDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }
}

export class Murmes__getItemCustomModuleOfTaskResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): Address {
    return this.value2;
  }
}

export class Murmes__getTaskItemsStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class Murmes__getTaskSettlementDataResult {
  value0: i32;
  value1: Address;
  value2: BigInt;

  constructor(value0: i32, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class Murmes__getTaskSettlementModuleAndItemsResult {
  value0: i32;
  value1: Array<BigInt>;

  constructor(value0: i32, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class Murmes__getUserBaseDataResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Murmes__postTaskInputVarsStruct extends ethereum.Tuple {
  get platform(): Address {
    return this[0].toAddress();
  }

  get sourceId(): BigInt {
    return this[1].toBigInt();
  }

  get requireId(): BigInt {
    return this[2].toBigInt();
  }

  get source(): string {
    return this[3].toString();
  }

  get settlement(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get currency(): Address {
    return this[6].toAddress();
  }

  get auditModule(): Address {
    return this[7].toAddress();
  }

  get detectionModule(): Address {
    return this[8].toAddress();
  }

  get deadline(): BigInt {
    return this[9].toBigInt();
  }
}

export class Murmes__submitItemInputVarsStruct extends ethereum.Tuple {
  get taskId(): BigInt {
    return this[0].toBigInt();
  }

  get cid(): string {
    return this[1].toString();
  }

  get requireId(): BigInt {
    return this[2].toBigInt();
  }

  get fingerprint(): BigInt {
    return this[3].toBigInt();
  }
}

export class Murmes__tasksResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: string;
  value5: i32;
  value6: BigInt;
  value7: Address;
  value8: Address;
  value9: Address;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: string,
    value5: i32,
    value6: BigInt,
    value7: Address,
    value8: Address,
    value9: Address,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getApplicant(): Address {
    return this.value0;
  }

  getPlatform(): Address {
    return this.value1;
  }

  getBoxId(): BigInt {
    return this.value2;
  }

  getRequireId(): BigInt {
    return this.value3;
  }

  getSource(): string {
    return this.value4;
  }

  getSettlement(): i32 {
    return this.value5;
  }

  getAmount(): BigInt {
    return this.value6;
  }

  getCurrency(): Address {
    return this.value7;
  }

  getAuditModule(): Address {
    return this.value8;
  }

  getDetectionModule(): Address {
    return this.value9;
  }

  getAdopted(): BigInt {
    return this.value10;
  }

  getDeadline(): BigInt {
    return this.value11;
  }
}

export class Murmes extends ethereum.SmartContract {
  static bind(address: Address): Murmes {
    return new Murmes("Murmes", address);
  }

  componentGlobal(): Address {
    let result = super.call(
      "componentGlobal",
      "componentGlobal():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_componentGlobal(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "componentGlobal",
      "componentGlobal():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAdoptedItemData(taskId: BigInt): Murmes__getAdoptedItemDataResult {
    let result = super.call(
      "getAdoptedItemData",
      "getAdoptedItemData(uint256):(uint256,address,address[])",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );

    return new Murmes__getAdoptedItemDataResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddressArray()
    );
  }

  try_getAdoptedItemData(
    taskId: BigInt
  ): ethereum.CallResult<Murmes__getAdoptedItemDataResult> {
    let result = super.tryCall(
      "getAdoptedItemData",
      "getAdoptedItemData(uint256):(uint256,address,address[])",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__getAdoptedItemDataResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddressArray()
      )
    );
  }

  getItem(itemId: BigInt): Murmes__getItemResultValue0Struct {
    let result = super.call(
      "getItem",
      "getItem(uint256):((uint8,uint256,address[],address[],uint256))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return changetype<Murmes__getItemResultValue0Struct>(result[0].toTuple());
  }

  try_getItem(
    itemId: BigInt
  ): ethereum.CallResult<Murmes__getItemResultValue0Struct> {
    let result = super.tryCall(
      "getItem",
      "getItem(uint256):((uint8,uint256,address[],address[],uint256))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Murmes__getItemResultValue0Struct>(value[0].toTuple())
    );
  }

  getItemAuditData(itemId: BigInt): Murmes__getItemAuditDataResult {
    let result = super.call(
      "getItemAuditData",
      "getItemAuditData(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return new Murmes__getItemAuditDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getItemAuditData(
    itemId: BigInt
  ): ethereum.CallResult<Murmes__getItemAuditDataResult> {
    let result = super.tryCall(
      "getItemAuditData",
      "getItemAuditData(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__getItemAuditDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getItemCustomModuleOfTask(
    itemId: BigInt
  ): Murmes__getItemCustomModuleOfTaskResult {
    let result = super.call(
      "getItemCustomModuleOfTask",
      "getItemCustomModuleOfTask(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return new Murmes__getItemCustomModuleOfTaskResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_getItemCustomModuleOfTask(
    itemId: BigInt
  ): ethereum.CallResult<Murmes__getItemCustomModuleOfTaskResult> {
    let result = super.tryCall(
      "getItemCustomModuleOfTask",
      "getItemCustomModuleOfTask(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__getItemCustomModuleOfTaskResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  getPlatformAddressByTaskId(taskId: BigInt): Address {
    let result = super.call(
      "getPlatformAddressByTaskId",
      "getPlatformAddressByTaskId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );

    return result[0].toAddress();
  }

  try_getPlatformAddressByTaskId(taskId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPlatformAddressByTaskId",
      "getPlatformAddressByTaskId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRequiresIdByNote(note: string): BigInt {
    let result = super.call(
      "getRequiresIdByNote",
      "getRequiresIdByNote(string):(uint256)",
      [ethereum.Value.fromString(note)]
    );

    return result[0].toBigInt();
  }

  try_getRequiresIdByNote(note: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequiresIdByNote",
      "getRequiresIdByNote(string):(uint256)",
      [ethereum.Value.fromString(note)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRequiresNoteById(requireId: BigInt): string {
    let result = super.call(
      "getRequiresNoteById",
      "getRequiresNoteById(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(requireId)]
    );

    return result[0].toString();
  }

  try_getRequiresNoteById(requireId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getRequiresNoteById",
      "getRequiresNoteById(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(requireId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTaskItemsState(taskId: BigInt): Murmes__getTaskItemsStateResult {
    let result = super.call(
      "getTaskItemsState",
      "getTaskItemsState(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );

    return new Murmes__getTaskItemsStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getTaskItemsState(
    taskId: BigInt
  ): ethereum.CallResult<Murmes__getTaskItemsStateResult> {
    let result = super.tryCall(
      "getTaskItemsState",
      "getTaskItemsState(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__getTaskItemsStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTaskSettlementData(taskId: BigInt): Murmes__getTaskSettlementDataResult {
    let result = super.call(
      "getTaskSettlementData",
      "getTaskSettlementData(uint256):(uint8,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );

    return new Murmes__getTaskSettlementDataResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_getTaskSettlementData(
    taskId: BigInt
  ): ethereum.CallResult<Murmes__getTaskSettlementDataResult> {
    let result = super.tryCall(
      "getTaskSettlementData",
      "getTaskSettlementData(uint256):(uint8,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__getTaskSettlementDataResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  getTaskSettlementModuleAndItems(
    taskId: BigInt
  ): Murmes__getTaskSettlementModuleAndItemsResult {
    let result = super.call(
      "getTaskSettlementModuleAndItems",
      "getTaskSettlementModuleAndItems(uint256):(uint8,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );

    return new Murmes__getTaskSettlementModuleAndItemsResult(
      result[0].toI32(),
      result[1].toBigIntArray()
    );
  }

  try_getTaskSettlementModuleAndItems(
    taskId: BigInt
  ): ethereum.CallResult<Murmes__getTaskSettlementModuleAndItemsResult> {
    let result = super.tryCall(
      "getTaskSettlementModuleAndItems",
      "getTaskSettlementModuleAndItems(uint256):(uint8,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(taskId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__getTaskSettlementModuleAndItemsResult(
        value[0].toI32(),
        value[1].toBigIntArray()
      )
    );
  }

  getUserBaseData(user: Address): Murmes__getUserBaseDataResult {
    let result = super.call(
      "getUserBaseData",
      "getUserBaseData(address):(uint256,int256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new Murmes__getUserBaseDataResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserBaseData(
    user: Address
  ): ethereum.CallResult<Murmes__getUserBaseDataResult> {
    let result = super.tryCall(
      "getUserBaseData",
      "getUserBaseData(address):(uint256,int256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__getUserBaseDataResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUserGuard(user: Address): Address {
    let result = super.call("getUserGuard", "getUserGuard(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toAddress();
  }

  try_getUserGuard(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUserGuard",
      "getUserGuard(address):(address)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserLockReward(user: Address, platform: Address, day: BigInt): BigInt {
    let result = super.call(
      "getUserLockReward",
      "getUserLockReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(platform),
        ethereum.Value.fromUnsignedBigInt(day)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserLockReward(
    user: Address,
    platform: Address,
    day: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserLockReward",
      "getUserLockReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(platform),
        ethereum.Value.fromUnsignedBigInt(day)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOperator(operator: Address): boolean {
    let result = super.call("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(operator)
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(operator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(operator)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moduleGlobal(): Address {
    let result = super.call("moduleGlobal", "moduleGlobal():(address)", []);

    return result[0].toAddress();
  }

  try_moduleGlobal(): ethereum.CallResult<Address> {
    let result = super.tryCall("moduleGlobal", "moduleGlobal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multiSig(): Address {
    let result = super.call("multiSig", "multiSig():(address)", []);

    return result[0].toAddress();
  }

  try_multiSig(): ethereum.CallResult<Address> {
    let result = super.tryCall("multiSig", "multiSig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  postTask(vars: Murmes__postTaskInputVarsStruct): BigInt {
    let result = super.call(
      "postTask",
      "postTask((address,uint256,uint256,string,uint8,uint256,address,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );

    return result[0].toBigInt();
  }

  try_postTask(
    vars: Murmes__postTaskInputVarsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "postTask",
      "postTask((address,uint256,uint256,string,uint8,uint256,address,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  submitItem(vars: Murmes__submitItemInputVarsStruct): BigInt {
    let result = super.call(
      "submitItem",
      "submitItem((uint256,string,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );

    return result[0].toBigInt();
  }

  try_submitItem(
    vars: Murmes__submitItemInputVarsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitItem",
      "submitItem((uint256,string,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tasks(param0: BigInt): Murmes__tasksResult {
    let result = super.call(
      "tasks",
      "tasks(uint256):(address,address,uint256,uint256,string,uint8,uint256,address,address,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Murmes__tasksResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toAddress(),
      result[9].toAddress(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_tasks(param0: BigInt): ethereum.CallResult<Murmes__tasksResult> {
    let result = super.tryCall(
      "tasks",
      "tasks(uint256):(address,address,uint256,uint256,string,uint8,uint256,address,address,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Murmes__tasksResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toAddress(),
        value[9].toAddress(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  totalTasks(): BigInt {
    let result = super.call("totalTasks", "totalTasks():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalTasks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalTasks", "totalTasks():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(platform: Address, day: Array<BigInt>): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(platform),
        ethereum.Value.fromUnsignedBigIntArray(day)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    platform: Address,
    day: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(platform),
        ethereum.Value.fromUnsignedBigIntArray(day)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mutliSig(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuditItemCall extends ethereum.Call {
  get inputs(): AuditItemCall__Inputs {
    return new AuditItemCall__Inputs(this);
  }

  get outputs(): AuditItemCall__Outputs {
    return new AuditItemCall__Outputs(this);
  }
}

export class AuditItemCall__Inputs {
  _call: AuditItemCall;

  constructor(call: AuditItemCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get attitude(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class AuditItemCall__Outputs {
  _call: AuditItemCall;

  constructor(call: AuditItemCall) {
    this._call = call;
  }
}

export class CancelTaskCall extends ethereum.Call {
  get inputs(): CancelTaskCall__Inputs {
    return new CancelTaskCall__Inputs(this);
  }

  get outputs(): CancelTaskCall__Outputs {
    return new CancelTaskCall__Outputs(this);
  }
}

export class CancelTaskCall__Inputs {
  _call: CancelTaskCall;

  constructor(call: CancelTaskCall) {
    this._call = call;
  }

  get taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelTaskCall__Outputs {
  _call: CancelTaskCall;

  constructor(call: CancelTaskCall) {
    this._call = call;
  }
}

export class HoldItemStateByDAOCall extends ethereum.Call {
  get inputs(): HoldItemStateByDAOCall__Inputs {
    return new HoldItemStateByDAOCall__Inputs(this);
  }

  get outputs(): HoldItemStateByDAOCall__Outputs {
    return new HoldItemStateByDAOCall__Outputs(this);
  }
}

export class HoldItemStateByDAOCall__Inputs {
  _call: HoldItemStateByDAOCall;

  constructor(call: HoldItemStateByDAOCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get state(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class HoldItemStateByDAOCall__Outputs {
  _call: HoldItemStateByDAOCall;

  constructor(call: HoldItemStateByDAOCall) {
    this._call = call;
  }
}

export class PostTaskCall extends ethereum.Call {
  get inputs(): PostTaskCall__Inputs {
    return new PostTaskCall__Inputs(this);
  }

  get outputs(): PostTaskCall__Outputs {
    return new PostTaskCall__Outputs(this);
  }
}

export class PostTaskCall__Inputs {
  _call: PostTaskCall;

  constructor(call: PostTaskCall) {
    this._call = call;
  }

  get vars(): PostTaskCallVarsStruct {
    return changetype<PostTaskCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class PostTaskCall__Outputs {
  _call: PostTaskCall;

  constructor(call: PostTaskCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PostTaskCallVarsStruct extends ethereum.Tuple {
  get platform(): Address {
    return this[0].toAddress();
  }

  get sourceId(): BigInt {
    return this[1].toBigInt();
  }

  get requireId(): BigInt {
    return this[2].toBigInt();
  }

  get source(): string {
    return this[3].toString();
  }

  get settlement(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get currency(): Address {
    return this[6].toAddress();
  }

  get auditModule(): Address {
    return this[7].toAddress();
  }

  get detectionModule(): Address {
    return this[8].toAddress();
  }

  get deadline(): BigInt {
    return this[9].toBigInt();
  }
}

export class PreDivideBatchBySettlementModuleCall extends ethereum.Call {
  get inputs(): PreDivideBatchBySettlementModuleCall__Inputs {
    return new PreDivideBatchBySettlementModuleCall__Inputs(this);
  }

  get outputs(): PreDivideBatchBySettlementModuleCall__Outputs {
    return new PreDivideBatchBySettlementModuleCall__Outputs(this);
  }
}

export class PreDivideBatchBySettlementModuleCall__Inputs {
  _call: PreDivideBatchBySettlementModuleCall;

  constructor(call: PreDivideBatchBySettlementModuleCall) {
    this._call = call;
  }

  get platform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PreDivideBatchBySettlementModuleCall__Outputs {
  _call: PreDivideBatchBySettlementModuleCall;

  constructor(call: PreDivideBatchBySettlementModuleCall) {
    this._call = call;
  }
}

export class PreDivideBySettlementModuleCall extends ethereum.Call {
  get inputs(): PreDivideBySettlementModuleCall__Inputs {
    return new PreDivideBySettlementModuleCall__Inputs(this);
  }

  get outputs(): PreDivideBySettlementModuleCall__Outputs {
    return new PreDivideBySettlementModuleCall__Outputs(this);
  }
}

export class PreDivideBySettlementModuleCall__Inputs {
  _call: PreDivideBySettlementModuleCall;

  constructor(call: PreDivideBySettlementModuleCall) {
    this._call = call;
  }

  get platform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PreDivideBySettlementModuleCall__Outputs {
  _call: PreDivideBySettlementModuleCall;

  constructor(call: PreDivideBySettlementModuleCall) {
    this._call = call;
  }
}

export class RegisterRequiresCall extends ethereum.Call {
  get inputs(): RegisterRequiresCall__Inputs {
    return new RegisterRequiresCall__Inputs(this);
  }

  get outputs(): RegisterRequiresCall__Outputs {
    return new RegisterRequiresCall__Outputs(this);
  }
}

export class RegisterRequiresCall__Inputs {
  _call: RegisterRequiresCall;

  constructor(call: RegisterRequiresCall) {
    this._call = call;
  }

  get notes(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }
}

export class RegisterRequiresCall__Outputs {
  _call: RegisterRequiresCall;

  constructor(call: RegisterRequiresCall) {
    this._call = call;
  }
}

export class ResetTaskCall extends ethereum.Call {
  get inputs(): ResetTaskCall__Inputs {
    return new ResetTaskCall__Inputs(this);
  }

  get outputs(): ResetTaskCall__Outputs {
    return new ResetTaskCall__Outputs(this);
  }
}

export class ResetTaskCall__Inputs {
  _call: ResetTaskCall;

  constructor(call: ResetTaskCall) {
    this._call = call;
  }

  get taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResetTaskCall__Outputs {
  _call: ResetTaskCall;

  constructor(call: ResetTaskCall) {
    this._call = call;
  }
}

export class SetGlobalContractCall extends ethereum.Call {
  get inputs(): SetGlobalContractCall__Inputs {
    return new SetGlobalContractCall__Inputs(this);
  }

  get outputs(): SetGlobalContractCall__Outputs {
    return new SetGlobalContractCall__Outputs(this);
  }
}

export class SetGlobalContractCall__Inputs {
  _call: SetGlobalContractCall;

  constructor(call: SetGlobalContractCall) {
    this._call = call;
  }

  get note(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetGlobalContractCall__Outputs {
  _call: SetGlobalContractCall;

  constructor(call: SetGlobalContractCall) {
    this._call = call;
  }
}

export class SetOperatorByToolCall extends ethereum.Call {
  get inputs(): SetOperatorByToolCall__Inputs {
    return new SetOperatorByToolCall__Inputs(this);
  }

  get outputs(): SetOperatorByToolCall__Outputs {
    return new SetOperatorByToolCall__Outputs(this);
  }
}

export class SetOperatorByToolCall__Inputs {
  _call: SetOperatorByToolCall;

  constructor(call: SetOperatorByToolCall) {
    this._call = call;
  }

  get old(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get replace(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorByToolCall__Outputs {
  _call: SetOperatorByToolCall;

  constructor(call: SetOperatorByToolCall) {
    this._call = call;
  }
}

export class SetUserGuardCall extends ethereum.Call {
  get inputs(): SetUserGuardCall__Inputs {
    return new SetUserGuardCall__Inputs(this);
  }

  get outputs(): SetUserGuardCall__Outputs {
    return new SetUserGuardCall__Outputs(this);
  }
}

export class SetUserGuardCall__Inputs {
  _call: SetUserGuardCall;

  constructor(call: SetUserGuardCall) {
    this._call = call;
  }

  get guard(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUserGuardCall__Outputs {
  _call: SetUserGuardCall;

  constructor(call: SetUserGuardCall) {
    this._call = call;
  }
}

export class SubmitItemCall extends ethereum.Call {
  get inputs(): SubmitItemCall__Inputs {
    return new SubmitItemCall__Inputs(this);
  }

  get outputs(): SubmitItemCall__Outputs {
    return new SubmitItemCall__Outputs(this);
  }
}

export class SubmitItemCall__Inputs {
  _call: SubmitItemCall;

  constructor(call: SubmitItemCall) {
    this._call = call;
  }

  get vars(): SubmitItemCallVarsStruct {
    return changetype<SubmitItemCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SubmitItemCall__Outputs {
  _call: SubmitItemCall;

  constructor(call: SubmitItemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitItemCallVarsStruct extends ethereum.Tuple {
  get taskId(): BigInt {
    return this[0].toBigInt();
  }

  get cid(): string {
    return this[1].toString();
  }

  get requireId(): BigInt {
    return this[2].toBigInt();
  }

  get fingerprint(): BigInt {
    return this[3].toBigInt();
  }
}

export class TransferMutliSigCall extends ethereum.Call {
  get inputs(): TransferMutliSigCall__Inputs {
    return new TransferMutliSigCall__Inputs(this);
  }

  get outputs(): TransferMutliSigCall__Outputs {
    return new TransferMutliSigCall__Outputs(this);
  }
}

export class TransferMutliSigCall__Inputs {
  _call: TransferMutliSigCall;

  constructor(call: TransferMutliSigCall) {
    this._call = call;
  }

  get newMutliSig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferMutliSigCall__Outputs {
  _call: TransferMutliSigCall;

  constructor(call: TransferMutliSigCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateLockRewardCall extends ethereum.Call {
  get inputs(): UpdateLockRewardCall__Inputs {
    return new UpdateLockRewardCall__Inputs(this);
  }

  get outputs(): UpdateLockRewardCall__Outputs {
    return new UpdateLockRewardCall__Outputs(this);
  }
}

export class UpdateLockRewardCall__Inputs {
  _call: UpdateLockRewardCall;

  constructor(call: UpdateLockRewardCall) {
    this._call = call;
  }

  get platform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get day(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class UpdateLockRewardCall__Outputs {
  _call: UpdateLockRewardCall;

  constructor(call: UpdateLockRewardCall) {
    this._call = call;
  }
}

export class UpdateTaskCall extends ethereum.Call {
  get inputs(): UpdateTaskCall__Inputs {
    return new UpdateTaskCall__Inputs(this);
  }

  get outputs(): UpdateTaskCall__Outputs {
    return new UpdateTaskCall__Outputs(this);
  }
}

export class UpdateTaskCall__Inputs {
  _call: UpdateTaskCall;

  constructor(call: UpdateTaskCall) {
    this._call = call;
  }

  get taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get plusAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get plusTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateTaskCall__Outputs {
  _call: UpdateTaskCall;

  constructor(call: UpdateTaskCall) {
    this._call = call;
  }
}

export class UpdateUserCall extends ethereum.Call {
  get inputs(): UpdateUserCall__Inputs {
    return new UpdateUserCall__Inputs(this);
  }

  get outputs(): UpdateUserCall__Outputs {
    return new UpdateUserCall__Outputs(this);
  }
}

export class UpdateUserCall__Inputs {
  _call: UpdateUserCall;

  constructor(call: UpdateUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reputationSpread(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenSpread(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateUserCall__Outputs {
  _call: UpdateUserCall;

  constructor(call: UpdateUserCall) {
    this._call = call;
  }
}

export class UserJoinCall extends ethereum.Call {
  get inputs(): UserJoinCall__Inputs {
    return new UserJoinCall__Inputs(this);
  }

  get outputs(): UserJoinCall__Outputs {
    return new UserJoinCall__Outputs(this);
  }
}

export class UserJoinCall__Inputs {
  _call: UserJoinCall;

  constructor(call: UserJoinCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UserJoinCall__Outputs {
  _call: UserJoinCall;

  constructor(call: UserJoinCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get platform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get day(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawDepositCall extends ethereum.Call {
  get inputs(): WithdrawDepositCall__Inputs {
    return new WithdrawDepositCall__Inputs(this);
  }

  get outputs(): WithdrawDepositCall__Outputs {
    return new WithdrawDepositCall__Outputs(this);
  }
}

export class WithdrawDepositCall__Inputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawDepositCall__Outputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }
}
