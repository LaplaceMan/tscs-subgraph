// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ComponentGlobal extends ethereum.SmartContract {
  static bind(address: Address): ComponentGlobal {
    return new ComponentGlobal("ComponentGlobal", address);
  }

  Murmes(): Address {
    let result = super.call("Murmes", "Murmes():(address)", []);

    return result[0].toAddress();
  }

  try_Murmes(): ethereum.CallResult<Address> {
    let result = super.tryCall("Murmes", "Murmes():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  access(): Address {
    let result = super.call("access", "access():(address)", []);

    return result[0].toAddress();
  }

  try_access(): ethereum.CallResult<Address> {
    let result = super.tryCall("access", "access():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  arbitration(): Address {
    let result = super.call("arbitration", "arbitration():(address)", []);

    return result[0].toAddress();
  }

  try_arbitration(): ethereum.CallResult<Address> {
    let result = super.tryCall("arbitration", "arbitration():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultDepositableToken(): Address {
    let result = super.call(
      "defaultDepositableToken",
      "defaultDepositableToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defaultDepositableToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultDepositableToken",
      "defaultDepositableToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  itemToken(): Address {
    let result = super.call("itemToken", "itemToken():(address)", []);

    return result[0].toAddress();
  }

  try_itemToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("itemToken", "itemToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockUpTime(): BigInt {
    let result = super.call("lockUpTime", "lockUpTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockUpTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockUpTime", "lockUpTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformToken(): Address {
    let result = super.call("platformToken", "platformToken():(address)", []);

    return result[0].toAddress();
  }

  try_platformToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformToken",
      "platformToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platforms(): Address {
    let result = super.call("platforms", "platforms():(address)", []);

    return result[0].toAddress();
  }

  try_platforms(): ethereum.CallResult<Address> {
    let result = super.tryCall("platforms", "platforms():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settlement(): Address {
    let result = super.call("settlement", "settlement():(address)", []);

    return result[0].toAddress();
  }

  try_settlement(): ethereum.CallResult<Address> {
    let result = super.tryCall("settlement", "settlement():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): Address {
    let result = super.call("version", "version():(address)", []);

    return result[0].toAddress();
  }

  try_version(): ethereum.CallResult<Address> {
    let result = super.tryCall("version", "version():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ms(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetComponentCall extends ethereum.Call {
  get inputs(): SetComponentCall__Inputs {
    return new SetComponentCall__Inputs(this);
  }

  get outputs(): SetComponentCall__Outputs {
    return new SetComponentCall__Outputs(this);
  }
}

export class SetComponentCall__Inputs {
  _call: SetComponentCall;

  constructor(call: SetComponentCall) {
    this._call = call;
  }

  get note(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetComponentCall__Outputs {
  _call: SetComponentCall;

  constructor(call: SetComponentCall) {
    this._call = call;
  }
}

export class SetLockUpTimeCall extends ethereum.Call {
  get inputs(): SetLockUpTimeCall__Inputs {
    return new SetLockUpTimeCall__Inputs(this);
  }

  get outputs(): SetLockUpTimeCall__Outputs {
    return new SetLockUpTimeCall__Outputs(this);
  }
}

export class SetLockUpTimeCall__Inputs {
  _call: SetLockUpTimeCall;

  constructor(call: SetLockUpTimeCall) {
    this._call = call;
  }

  get time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLockUpTimeCall__Outputs {
  _call: SetLockUpTimeCall;

  constructor(call: SetLockUpTimeCall) {
    this._call = call;
  }
}
